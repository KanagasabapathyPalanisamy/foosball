{"version":3,"sources":["Card.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","age","width","name","TsNo","Role","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAYeA,MAXf,SAAcC,GACV,OACI,yBAAKC,UAAU,MACvB,yBAAKC,IAAG,+BAA0BF,EAAMG,IAAhC,aAA+CC,MAAM,QACjD,2BAAIJ,EAAMK,MACX,2BAAIL,EAAMM,MACV,2BAAIN,EAAMO,QC8CNC,E,iLA/CX,OACE,yBAAKP,UAAU,OAErB,kBAAC,EAAD,CAAMI,KAAK,eAAeF,IAAI,KAAKG,KAAK,KAAKC,KAAK,aAClD,kBAAC,EAAD,CAAMF,KAAK,QAAQF,IAAI,KAAIG,KAAK,KAAKC,KAAK,WAC1C,kBAAC,EAAD,CAAMF,KAAK,cAAcF,IAAI,KAAIG,KAAK,KAAKC,KAAK,aAChD,kBAAC,EAAD,CAAMF,KAAK,YAAYF,IAAI,KAAIG,KAAK,MAAMC,KAAK,aAC/C,kBAAC,EAAD,CAAMF,KAAK,OAAOF,IAAI,QAAOG,KAAK,KAAKC,KAAK,WAC5C,kBAAC,EAAD,CAAMF,KAAK,QAAQF,IAAI,SAAQG,KAAK,KAAKC,KAAK,WAC9C,kBAAC,EAAD,CAAMF,KAAK,UAAUF,IAAI,OAAMG,KAAK,KAAKC,KAAK,WAC9C,kBAAC,EAAD,CAAMF,KAAK,QAAQF,IAAI,KAAIG,KAAK,KAAKC,KAAK,aAC1C,kBAAC,EAAD,CAAMF,KAAK,iBAAiBF,IAAI,IAAGG,KAAK,KAAKC,KAAK,aAClD,kBAAC,EAAD,CAAMF,KAAK,UAAUF,IAAI,KAAIG,KAAK,KAAKC,KAAK,aAC5C,kBAAC,EAAD,CAAMF,KAAK,SAASF,IAAI,OAAMG,KAAK,KAAKC,KAAK,SAC7C,kBAAC,EAAD,CAAMF,KAAK,SAASF,IAAI,KAAIG,KAAK,KAAKC,KAAK,WAC3C,kBAAC,EAAD,CAAMF,KAAK,SAASF,IAAI,KAAIG,KAAK,KAAKC,KAAK,QAC3C,kBAAC,EAAD,CAAMF,KAAK,SAASF,IAAI,OAAMG,KAAK,KAAKC,KAAK,SAC7C,kBAAC,EAAD,CAAMF,KAAK,SAASF,IAAI,KAAIG,KAAK,KAAKC,KAAK,aAC3C,kBAAC,EAAD,CAAMF,KAAK,cAAcF,IAAI,IAAGG,KAAK,MAAMC,KAAK,aAChD,kBAAC,EAAD,CAAMF,KAAK,eAAeF,IAAI,IAAGG,KAAK,MAAMC,KAAK,aACjD,kBAAC,EAAD,CAAMF,KAAK,gBAAgBF,IAAI,OAAMG,KAAK,MAAMC,KAAK,aACrD,kBAAC,EAAD,CAAMF,KAAK,aAAaF,IAAI,IAAGG,KAAK,KAAKC,KAAK,aAC9C,kBAAC,EAAD,CAAMF,KAAK,gBAAgBF,IAAI,KAAIG,KAAK,MAAMC,KAAK,kB,GAxBhCE,aCQCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.96a81557.chunk.js","sourcesContent":["import React from 'react';\r\nfunction Card(props){\r\n    return (\r\n        <div className=\"vj\">\r\n<img src={`https://robohash.org/${props.age}?set=set5`}width=\"210\"/>\r\n            <p>{props.name}</p>\r\n           <p>{props.TsNo}</p>\r\n           <p>{props.Role}</p>\r\n    </div>\r\n    )\r\n\r\n}\r\nexport default Card;","import React,{Component} from 'react';\r\n// import logo from './logo.svg';\r\n import './App.css';\r\nimport Card from './Card';\r\n class App extends Component {\r\n  render() {\r\n    return(\r\n      <div className=\"bbb\">\r\n\r\n<Card name=\"Rohit Sharma\" age=\"ff\" TsNo=\"45\" Role=\"Bat/Spin\"/>\r\n<Card name=\"Rahul\" age=\"22\"TsNo=\"21\" Role=\"Bat/Wk\"/>\r\n<Card name=\"virat Kholi\" age=\"11\"TsNo=\"18\" Role=\"Bat/fast\"/>\r\n<Card name=\"H Pandiya\" age=\"aa\"TsNo=\"333\" Role=\"Bat/fast\"/>\r\n<Card name=\"Pant\" age=\"kumar\"TsNo=\"05\" Role=\"Bat/Wk\"/>\r\n<Card name=\"Dhoni\" age=\"dinesh\"TsNo=\"07\" Role=\"Bat/Wk\"/>\r\n<Card name=\"Karthik\" age=\"bala\"TsNo=\"12\" Role=\"Bat/Wk\"/>\r\n<Card name=\"Bhuvi\" age=\"27\"TsNo=\"15\" Role=\"Bat/Fast\"/>\r\n<Card name=\"Mohammed Shami\" age=\"2\"TsNo=\"23\" Role=\"Bat/Fast\"/>\r\n<Card name=\"kuldeep\" age=\"29\"TsNo=\"43\" Role=\"Bat/Spin\"/>\r\n<Card name=\"Bumrah\" age=\"kags\"TsNo=\"65\" Role=\"Fast\"/>\r\n<Card name=\"kedhar\" age=\"18\"TsNo=\"75\" Role=\"Bat/Wk\"/>\r\n<Card name=\"Dhawan\" age=\"17\"TsNo=\"48\" Role=\"Bat\"/>\r\n<Card name=\"Chahal\" age=\"ramu\"TsNo=\"49\" Role=\"Spin\"/>\r\n<Card name=\"Jadeja\" age=\"15\"TsNo=\"11\" Role=\"Bat/Spin\"/>\r\n<Card name=\"Mumbai Boys\" age=\"8\"TsNo=\"111\" Role=\"Bat/Spin\"/>\r\n<Card name=\"Chennai Boys\" age=\"7\"TsNo=\"415\" Role=\"Bat/Spin\"/>\r\n<Card name=\"SunRises Boys\" age=\"ramu\"TsNo=\"675\" Role=\"Bat/Spin\"/>\r\n<Card name=\"Delhi Boys\" age=\"5\"TsNo=\"34\" Role=\"Bat/Spin\"/>\r\n<Card name=\"Banglore Boys\" age=\"95\"TsNo=\"934\" Role=\"Bat/Spin\"/>\r\n      </div>\r\n  )\r\n  }\r\n}\r\n/* function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}*/\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}